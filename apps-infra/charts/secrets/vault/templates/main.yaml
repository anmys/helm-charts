{{- if .Values.enabled }}
{{/* Configuración del Clúster */}}
{{- $namespace := "vault" -}}
{{- $project := "default" -}}
{{- $destinationName := "in-cluster" -}}
{{- $sizeSSD := "2Gi" -}}
{{- $sizePVC := "2Gi" -}}
---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: vault
---
# Preparar directorio en el nodo
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-dir-init-{{ .Release.Name }}
  namespace: vault
spec:
  template:
    spec:
      restartPolicy: OnFailure
      nodeSelector:
        kubernetes.io/hostname: raspberrypi
      containers:
      - name: init
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          mkdir -p /mnt/ssd/app-data/vault/0
          rm -rf /mnt/ssd/app-data/vault/0/* # Clean any old data
          chmod -R 777 /mnt/ssd/app-data/vault/0
          ls -la /mnt/ssd/app-data/vault/0
          echo "Directory structure created with proper permissions"
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /mnt/ssd/app-data
          name: ssd-mount
      volumes:
      - name: ssd-mount
        hostPath:
          path: /mnt/ssd/app-data
          type: DirectoryOrCreate
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
---
# Configuración de PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-data-vault-0-{{ .Release.Name }}
  namespace: vault
spec:
  storageClassName: local-path
  capacity:
    storage: {{ $sizeSSD }}
  accessModes:
    - ReadWriteOnce
  local:
    fsType: ""
    path: /mnt/ssd/app-data/vault/0
  persistentVolumeReclaimPolicy: Retain
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
            - raspberrypi
---
# Configuración de PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-vault-app-0-{{ .Release.Name }}
  namespace: vault
spec:
  volumeName: pv-data-vault-0-{{ .Release.Name }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ $sizePVC }}
  storageClassName: local-path
---
# Configuración de la aplicación Vault en ArgoCD
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vault-app
spec:
  project: {{ $project }}
  destination:
    name: {{ $destinationName }}
    namespace: {{ $namespace }}
  ignoreDifferences: 
  - group: "apps"
    kind: "Deployment"
    jsonPointers:
    - /spec/replicas
  - group: "admissionregistration.k8s.io"
    kind: "MutatingWebhookConfiguration"
    name: "vault-app-agent-injector-cfg"
    jsonPointers:
    - /webhooks/0/clientConfig/caBundle
  source:
    repoURL: "https://helm.releases.hashicorp.com"
    chart: vault
    targetRevision: "0.29.1"
    helm:
      valuesObject:
        global:
          enabled: true
          tlsDisable: true
          namespace: vault
        ui:
          enabled: true
          serviceType: ClusterIP
          serviceNodePort: null
          externalPort: 8200
          activeVaultPodOnly: false
        server:
          dataStorage:
            enabled: true
            size: {{ $sizePVC }}
            storageClass: local-path
            accessMode: ReadWriteOnce
            mountPath: "/vault/data"
          standalone:
            enabled: true
            config: |
              ui = true
              listener "tcp" {
                address = "0.0.0.0:8200"
                cluster_address = "0.0.0.0:8201"
                tls_disable = "true"
              }
              
              storage "file" {
                path = "/vault/data"
              }
              
              service_registration "kubernetes" {}
          serviceAccount:
            annotations: {}
          ingress:
            activeService: false
            enabled: true
            annotations:
              kubernetes.io/ingress.class: traefik
              cert-manager.io/cluster-issuer: dmascotte-issuer
              traefik.ingress.kubernetes.io/router.tls: "true"
            hosts:
              - host: vault.dmascotte.com
                paths:
                  - /
            pathType: Prefix
            tls:
              - hosts:
                  - vault.dmascotte.com
            labels: {}
          ha:
            enabled: false
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: data-vault-app-0-{{ .Release.Name }}
          volumeMounts:
            - name: data
              mountPath: /vault/data
          extraInitContainers:
            - name: setup-vault-storage
              image: busybox:1.35
              command:
              - sh
              - -c
              - |
                mkdir -p /vault/data
                chmod -R 777 /vault/data
                ls -la /vault/data
                echo "Vault data directory initialized"
              volumeMounts:
              - name: data
                mountPath: /vault/data
          securityContext:
            runAsUser: 100
            runAsGroup: 1000
            fsGroup: 1000
          nodeSelector:
            kubernetes.io/hostname: raspberrypi
            
        injector:
          enabled: true
          replicas: 1
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
        extraSecretEnvironmentVars:
          VAULT_TOKEN:
            secretName: vault-token
            secretKey: token

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
# Secret for Vault token
apiVersion: v1
kind: Secret
metadata:
  name: vault-token
  namespace: vault
  labels:
    app.kubernetes.io/instance: vault-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: vault
data:
  token: aHZzLllDNkxlTGIxdGJIOERMWFhXTVhwTFV5Vg==
type: Opaque
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-secret-store
spec:
  provider:
    vault:
      server: http://vault-app.vault.svc.cluster.local:8200
      path: secret
      version: v2
      auth:
        tokenSecretRef:
          name: vault-token
          namespace: vault
          key: token
---
{{ end -}}
